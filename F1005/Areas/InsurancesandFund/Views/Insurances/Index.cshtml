@model IEnumerable<F1005.Models.Insurances>

@{
	ViewBag.Title = "Index";
}

<h2>My 儲蓄險</h2>

<p>
	@Html.ActionLink("試算/加入一筆保單", "Create")
</p>
<ul class="nav nav-tabs">
	<li class="active"><a data-toggle="tab" href="#home">保險資產總覽</a></li>
	<li><a data-toggle="tab" href="#record">交易紀錄</a></li>
</ul>

<div class="tab-content">
	<div id="home" class="tab-pane fade in active">
		<h3>未實現保險資產</h3>
		<div class="col-md-3"></div>
		<div class="col-md-6">
			<canvas id="UnWithdrawedDoughnut"></canvas>
		</div>
		<div class="col-md-3"></div>
		<hr />

		<table class="table">
			<tr>
				<th>
					@Html.DisplayNameFor(model => model.InsuranceName)
				</th>
				<th>
					@Html.DisplayNameFor(model => model.PurchaseDate)
				</th>
				<th>
					@Html.DisplayNameFor(model => model.WithdrawDate)
				</th>
				<th>
					@Html.DisplayNameFor(model => model.PaymentPerYear)
				</th>
				<th>
					@Html.DisplayNameFor(model => model.PayYear)
				</th>
				<th>
					@Html.DisplayNameFor(model => model.Withdrawal)
				</th>
				<th>
					<span>解約/修改</span>
				</th>
			</tr>

			@foreach (var item in Model.Where(model => model.PurchaseOrWithdraw == true && model.Withdrawed == false && model.UserID == Session["User"].ToString()))
			{
				<tr>
					<td>
						@Html.DisplayFor(modelItem => item.InsuranceName)
					</td>
					<td>
						@Html.DisplayFor(modelItem => item.PurchaseDate)
					</td>
					<td>
						@Html.DisplayFor(modelItem => item.WithdrawDate)
					</td>
					<td>
						@Html.DisplayFor(modelItem => item.PaymentPerYear)
					</td>
					<td>
						@Html.DisplayFor(modelItem => item.PayYear)
					</td>
					<td>
						@Html.DisplayFor(modelItem => item.Withdrawal)
					</td>
					<td>
						@Html.ActionLink("解約這筆保單", "Withdraw", new { id = item.SerialNumber })
						<br />
						@Html.ActionLink("檢視/修改保單", "Edit", new { id = item.SerialNumber })
					</td>
				</tr>
			}

		</table>
		<hr />
		<h3>已實現保險資產</h3>
		<div class="col-md-3"></div>
		<div class="col-md-6">
			<canvas id="WithdrawedDoughnut"></canvas>
		</div>
		<div class="col-md-3"></div>

		<table class="table">

			<tr>
				<th>
					@Html.DisplayNameFor(model => model.InsuranceName)
				</th>
				<th>
					@Html.DisplayNameFor(model => model.PurchaseDate)
				</th>
				<th>
					@Html.DisplayNameFor(model => model.WithdrawDate)
				</th>
				<th>
					@Html.DisplayNameFor(model => model.PaymentPerYear)
				</th>
				<th>
					@Html.DisplayNameFor(model => model.PayYear)
				</th>
				<th>
					@Html.DisplayNameFor(model => model.Withdrawal)
				</th>
			</tr>

			@foreach (var item in Model.Where(model => model.PurchaseOrWithdraw == false && model.UserID == Session["User"].ToString()))
			{
				<tr>
					<td>
						@Html.DisplayFor(modelItem => item.InsuranceName)
					</td>
					<td>
						@Html.DisplayFor(modelItem => item.PurchaseDate)
					</td>
					<td>
						@Html.DisplayFor(modelItem => item.WithdrawDate)
					</td>
					<td>
						@Html.DisplayFor(modelItem => item.PaymentPerYear)
					</td>
					<td>
						@Html.DisplayFor(modelItem => item.PayYear)
					</td>
					<td>
						@Html.DisplayFor(modelItem => item.Withdrawal)
					</td>
				</tr>
			}

		</table>
	</div>



	<div id="record" class="tab-pane fade">
		<h3>交易紀錄</h3>
		<table id="myGrid"></table>
		<div id="pager"></div>
	</div>

</div>

@section scripts
	{
	<script>
				function LoadUnWithdrawedDoughnut()	{
	$.ajax({
	type: "Get",
	url: "@Url.Action("GetCurrentDoughnut", "Insurances")",
	data: null,
	dataType: "json",
		success: function (response) {
			var datalabels = [];
			var data = [];
			var total = 0;
			for (var i = 0; i < response.length; i++) {
				var arr = $.map(response[i], function (qq) { return qq; })
				total += parseInt(arr[1]);
			}
			for (var i = 0; i < response.length; i++)
			{
				var arr = $.map(response[i], function (qq) { return qq; })
				datalabels.push(arr[0]);
				data.push(((parseInt(arr[1]) / total) * 100).toFixed(2));
			}
			
			var ctxDoughnut = document.getElementById("UnWithdrawedDoughnut");
	var DoughnutChart = new Chart(ctxDoughnut, {
	type: 'doughnut',
	data: {
	labels: datalabels,
	datasets: [{
	data: data,
	backgroundColor: [
	window.chartColors.blue,
		window.chartColors.red,
		window.chartColors.green,
		window.chartColors.yellow,
		window.chartColors.gray,
		window.chartColors.orange,
		window.chartColors.purple,
	]
	}],
	},
	options: {
	responsive: true,
	title: {
	display: true,
	fontSize: 26,
	text: '未實現保險收入百分比'
	},
	}
	})
	}
	});
		};
		function LoadWithdrawedDoughnut()	{
	$.ajax({
	type: "Get",
	url: "@Url.Action("GetWithdrawedDoughnut", "Insurances")",
	data: null,
	dataType: "json",
		success: function (response) {
			var datalabels = [];
			var data = [];
			var total = 0;
			for (var i = 0; i < response.length; i++) {
				var arr = $.map(response[i], function (qq) { return qq; })
				total += parseInt(arr[1]);
			}
			for (var i = 0; i < response.length; i++)
			{
				var arr = $.map(response[i], function (qq) { return qq; })
				datalabels.push(arr[0]);
				data.push(((parseInt(arr[1]) / total) * 100).toFixed(2));
			}
			
	var ctxDoughnut = document.getElementById("WithdrawedDoughnut");
	var DoughnutChart = new Chart(ctxDoughnut, {
	type: 'doughnut',
	data: {
	labels: datalabels,
	datasets: [{
	data: data,
	backgroundColor: [
	window.chartColors.blue,
		window.chartColors.red,
		window.chartColors.green,
		window.chartColors.yellow,
		window.chartColors.gray,
		window.chartColors.orange,
		window.chartColors.purple,
	]
	}],
	},
	options: {
	responsive: true,
	title: {
	display: true,
	fontSize: 26,
	text: '已實現保險收入百分比'
	},
	}
	})
	}
	});
		};
		$(document).ready(function () {
			LoadWithdrawedDoughnut();
			LoadUnWithdrawedDoughnut();
		});
	</script>
	

}

